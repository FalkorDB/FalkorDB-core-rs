/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(
        &self,
        fmt: &mut ::std::fmt::Formatter<'_>,
    ) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(
        &self,
        _state: &mut H,
    ) {
    }
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(
        &self,
        _other: &__BindgenUnionField<T>,
    ) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const GRAPH_DEFAULT_RELATION_TYPE_CAP: u32 = 16;
pub const GRAPH_DEFAULT_LABEL_CAP: u32 = 16;
pub const GRAPH_NO_LABEL: i32 = -1;
pub const GRAPH_UNKNOWN_LABEL: i32 = -2;
pub const GRAPH_NO_RELATION: i32 = -1;
pub const GRAPH_UNKNOWN_RELATION: i32 = -2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
pub struct __atomic_wide_counter {
    pub __value64: __BindgenUnionField<::std::os::raw::c_ulonglong>,
    pub __value32: __BindgenUnionField<__atomic_wide_counter__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<__pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<__pthread_cond_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<__pthread_rwlock_arch_t>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct _UndoLog {
    _unused: [u8; 0],
}
pub type UndoLog = *mut _UndoLog;
#[repr(C)]
#[derive(Debug)]
pub struct _AST {
    _unused: [u8; 0],
}
pub type AST = _AST;
#[repr(C)]
#[derive(Debug)]
pub struct _rax {
    _unused: [u8; 0],
}
pub type rax = _rax;
#[repr(C)]
#[derive(Debug)]
pub struct _EffectsBuffer {
    _unused: [u8; 0],
}
pub type EffectsBuffer = _EffectsBuffer;
#[repr(C)]
#[derive(Debug)]
pub struct _RedisModuleKey {
    _unused: [u8; 0],
}
pub type RedisModuleKey = _RedisModuleKey;
#[repr(C)]
#[derive(Debug)]
pub struct _RedisModuleCtx {
    _unused: [u8; 0],
}
pub type RedisModuleCtx = _RedisModuleCtx;
#[repr(C)]
#[derive(Debug)]
pub struct _ResultSet {
    _unused: [u8; 0],
}
pub type ResultSet = _ResultSet;
#[repr(C)]
#[derive(Debug)]
pub struct _RedisModuleBlockedClient {
    _unused: [u8; 0],
}
pub type RedisModuleBlockedClient = _RedisModuleBlockedClient;
#[repr(C)]
#[derive(Debug)]
pub struct _bolt_client_t {
    _unused: [u8; 0],
}
pub type bolt_client_t = _bolt_client_t;
#[repr(C)]
#[derive(Debug)]
pub struct _DataBlock {
    _unused: [u8; 0],
}
pub type DataBlock = _DataBlock;
#[repr(C)]
#[derive(Debug)]
pub struct _Schema {
    _unused: [u8; 0],
}
pub type Schema = _Schema;
#[repr(C)]
#[derive(Debug)]
pub struct _SlowLog {
    _unused: [u8; 0],
}
pub type SlowLog = _SlowLog;
#[repr(C)]
#[derive(Debug)]
pub struct _GraphEncodeContext {
    _unused: [u8; 0],
}
pub type GraphEncodeContext = _GraphEncodeContext;
#[repr(C)]
#[derive(Debug)]
pub struct _GraphDecodeContext {
    _unused: [u8; 0],
}
pub type GraphDecodeContext = _GraphDecodeContext;
#[repr(C)]
#[derive(Debug)]
pub struct _Delta_Matrix {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct _Cache {
    _unused: [u8; 0],
}
pub type Cache = _Cache;
#[repr(C)]
#[derive(Debug)]
pub struct _RedisModuleString {
    _unused: [u8; 0],
}
pub type RedisModuleString = _RedisModuleString;
#[repr(C)]
#[derive(Debug)]
pub struct _QueriesLog {
    _unused: [u8; 0],
}
pub type QueriesLog = *mut _QueriesLog;
pub type Delta_Matrix = *mut _Delta_Matrix;
pub type simple_timer_t = [f64; 2usize];
pub type XXH32_hash_t = u32;
pub type GrB_Index = u64;
pub const GRAPH_EDGE_DIR_GRAPH_EDGE_DIR_INCOMING: GRAPH_EDGE_DIR = 0;
pub const GRAPH_EDGE_DIR_GRAPH_EDGE_DIR_OUTGOING: GRAPH_EDGE_DIR = 1;
pub const GRAPH_EDGE_DIR_GRAPH_EDGE_DIR_BOTH: GRAPH_EDGE_DIR = 2;
pub type GRAPH_EDGE_DIR = ::std::os::raw::c_uint;
pub const MATRIX_POLICY_SYNC_POLICY_UNKNOWN: MATRIX_POLICY = 0;
pub const MATRIX_POLICY_SYNC_POLICY_FLUSH_RESIZE: MATRIX_POLICY = 1;
pub const MATRIX_POLICY_SYNC_POLICY_RESIZE: MATRIX_POLICY = 2;
pub const MATRIX_POLICY_SYNC_POLICY_NOP: MATRIX_POLICY = 3;
pub type MATRIX_POLICY = ::std::os::raw::c_uint;
pub type SyncMatrixFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const Graph, arg2: Delta_Matrix, arg3: GrB_Index, arg4: GrB_Index),
>;
#[repr(C)]
#[derive(Debug)]
pub struct RelationMatrices {
    pub R: Delta_Matrix,
    pub S: Delta_Matrix,
    pub T: Delta_Matrix,
}
#[test]
fn bindgen_test_layout_RelationMatrices() {
    const UNINIT: ::std::mem::MaybeUninit<RelationMatrices> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RelationMatrices>(),
        24usize,
        concat!("Size of: ", stringify!(RelationMatrices))
    );
    assert_eq!(
        ::std::mem::align_of::<RelationMatrices>(),
        8usize,
        concat!("Alignment of ", stringify!(RelationMatrices))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationMatrices),
            "::",
            stringify!(R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).S) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationMatrices),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RelationMatrices),
            "::",
            stringify!(T)
        )
    );
}
#[repr(C)]
pub struct Graph {
    pub reserved_node_count: ::std::os::raw::c_int,
    pub nodes: *mut DataBlock,
    pub edges: *mut DataBlock,
    pub adjacency_matrix: Delta_Matrix,
    pub labels: *mut Delta_Matrix,
    pub node_labels: Delta_Matrix,
    pub relations: *mut RelationMatrices,
    pub _zero_matrix: Delta_Matrix,
    pub _rwlock: pthread_rwlock_t,
    pub _writelocked: bool,
    pub SynchronizeMatrix: SyncMatrixFunc,
}
#[test]
fn bindgen_test_layout_Graph() {
    const UNINIT: ::std::mem::MaybeUninit<Graph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Graph>(),
        136usize,
        concat!("Size of: ", stringify!(Graph))
    );
    assert_eq!(
        ::std::mem::align_of::<Graph>(),
        8usize,
        concat!("Alignment of ", stringify!(Graph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_node_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(reserved_node_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edges) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjacency_matrix) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(adjacency_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).labels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(labels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_labels) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(node_labels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relations) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._zero_matrix) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(_zero_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rwlock) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(_rwlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._writelocked) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(_writelocked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SynchronizeMatrix) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Graph),
            "::",
            stringify!(SynchronizeMatrix)
        )
    );
}
#[repr(C)]
pub struct GraphContext {
    pub g: *mut Graph,
    pub ref_count: ::std::os::raw::c_int,
    pub attributes: *mut rax,
    pub _attribute_rwlock: pthread_rwlock_t,
    pub graph_name: *mut ::std::os::raw::c_char,
    pub string_mapping: *mut *mut ::std::os::raw::c_char,
    pub node_schemas: *mut *mut Schema,
    pub relation_schemas: *mut *mut Schema,
    pub index_count: ::std::os::raw::c_ushort,
    pub slowlog: *mut SlowLog,
    pub queries_log: QueriesLog,
    pub encoding_context: *mut GraphEncodeContext,
    pub decoding_context: *mut GraphDecodeContext,
    pub cache: *mut Cache,
    pub version: XXH32_hash_t,
    pub telemetry_stream: *mut RedisModuleString,
}
#[test]
fn bindgen_test_layout_GraphContext() {
    const UNINIT: ::std::mem::MaybeUninit<GraphContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GraphContext>(),
        176usize,
        concat!("Size of: ", stringify!(GraphContext))
    );
    assert_eq!(
        ::std::mem::align_of::<GraphContext>(),
        8usize,
        concat!("Alignment of ", stringify!(GraphContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._attribute_rwlock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(_attribute_rwlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_name) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(graph_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_mapping) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(string_mapping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_schemas) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(node_schemas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relation_schemas) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(relation_schemas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_count) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(index_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slowlog) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(slowlog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queries_log) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(queries_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding_context) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(encoding_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decoding_context) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(decoding_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).telemetry_stream) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphContext),
            "::",
            stringify!(telemetry_stream)
        )
    );
}
extern "C" {
    pub static mut _tlsQueryCtxKey: pthread_key_t;
}
pub const QueryExecutionTypeFlag_QueryExecutionTypeFlag_READ: QueryExecutionTypeFlag = 0;
pub const QueryExecutionTypeFlag_QueryExecutionTypeFlag_WRITE: QueryExecutionTypeFlag = 1;
pub const QueryExecutionTypeFlag_QueryExecutionTypeFlag_PROFILE: QueryExecutionTypeFlag = 2;
pub type QueryExecutionTypeFlag = ::std::os::raw::c_uint;
pub const QueryExecutionStatus_QueryExecutionStatus_SUCCESS: QueryExecutionStatus = 0;
pub const QueryExecutionStatus_QueryExecutionStatus_FAILURE: QueryExecutionStatus = 1;
pub const QueryExecutionStatus_QueryExecutionStatus_TIMEDOUT: QueryExecutionStatus = 2;
pub type QueryExecutionStatus = ::std::os::raw::c_uint;
pub const QueryStage_QueryStage_WAITING: QueryStage = 0;
pub const QueryStage_QueryStage_EXECUTING: QueryStage = 1;
pub const QueryStage_QueryStage_REPORTING: QueryStage = 2;
pub const QueryStage_QueryStage_FINISHED: QueryStage = 3;
pub type QueryStage = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct QueryCtx_QueryData {
    pub ast: *mut AST,
    pub params: *mut rax,
    pub query: *const ::std::os::raw::c_char,
    pub query_no_params: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_QueryCtx_QueryData() {
    const UNINIT: ::std::mem::MaybeUninit<QueryCtx_QueryData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QueryCtx_QueryData>(),
        32usize,
        concat!("Size of: ", stringify!(QueryCtx_QueryData))
    );
    assert_eq!(
        ::std::mem::align_of::<QueryCtx_QueryData>(),
        8usize,
        concat!("Alignment of ", stringify!(QueryCtx_QueryData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ast) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_QueryData),
            "::",
            stringify!(ast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_QueryData),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_QueryData),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_no_params) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_QueryData),
            "::",
            stringify!(query_no_params)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct QueryCtx_InternalExecCtx {
    pub key: *mut RedisModuleKey,
    pub result_set: *mut ResultSet,
    pub locked_for_commit: bool,
}
#[test]
fn bindgen_test_layout_QueryCtx_InternalExecCtx() {
    const UNINIT: ::std::mem::MaybeUninit<QueryCtx_InternalExecCtx> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QueryCtx_InternalExecCtx>(),
        24usize,
        concat!("Size of: ", stringify!(QueryCtx_InternalExecCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<QueryCtx_InternalExecCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(QueryCtx_InternalExecCtx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_InternalExecCtx),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_set) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_InternalExecCtx),
            "::",
            stringify!(result_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locked_for_commit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_InternalExecCtx),
            "::",
            stringify!(locked_for_commit)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct QueryCtx_GlobalExecCtx {
    pub redis_ctx: *mut RedisModuleCtx,
    pub bc: *mut RedisModuleBlockedClient,
    pub bolt_client: *mut bolt_client_t,
    pub command_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_QueryCtx_GlobalExecCtx() {
    const UNINIT: ::std::mem::MaybeUninit<QueryCtx_GlobalExecCtx> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QueryCtx_GlobalExecCtx>(),
        32usize,
        concat!("Size of: ", stringify!(QueryCtx_GlobalExecCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<QueryCtx_GlobalExecCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(QueryCtx_GlobalExecCtx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redis_ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_GlobalExecCtx),
            "::",
            stringify!(redis_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_GlobalExecCtx),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bolt_client) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_GlobalExecCtx),
            "::",
            stringify!(bolt_client)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx_GlobalExecCtx),
            "::",
            stringify!(command_name)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct QueryStats {
    pub timer: simple_timer_t,
    pub received_ts: u64,
    pub durations: [f64; 3usize],
    pub parameterized: bool,
    pub utilized_cache: bool,
}
#[test]
fn bindgen_test_layout_QueryStats() {
    const UNINIT: ::std::mem::MaybeUninit<QueryStats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QueryStats>(),
        56usize,
        concat!("Size of: ", stringify!(QueryStats))
    );
    assert_eq!(
        ::std::mem::align_of::<QueryStats>(),
        8usize,
        concat!("Alignment of ", stringify!(QueryStats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryStats),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received_ts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryStats),
            "::",
            stringify!(received_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).durations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryStats),
            "::",
            stringify!(durations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameterized) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryStats),
            "::",
            stringify!(parameterized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utilized_cache) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryStats),
            "::",
            stringify!(utilized_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct QueryCtx {
    pub stats: QueryStats,
    pub gc: *mut GraphContext,
    pub undo_log: UndoLog,
    pub stage: QueryStage,
    pub status: QueryExecutionStatus,
    pub flags: QueryExecutionTypeFlag,
    pub effects_buffer: *mut EffectsBuffer,
    pub query_data: QueryCtx_QueryData,
    pub global_exec_ctx: QueryCtx_GlobalExecCtx,
    pub internal_exec_ctx: QueryCtx_InternalExecCtx,
}
#[test]
fn bindgen_test_layout_QueryCtx() {
    const UNINIT: ::std::mem::MaybeUninit<QueryCtx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<QueryCtx>(),
        184usize,
        concat!("Size of: ", stringify!(QueryCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<QueryCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(QueryCtx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stats) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_log) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(undo_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).effects_buffer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(effects_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_data) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(query_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_exec_ctx) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(global_exec_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_exec_ctx) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryCtx),
            "::",
            stringify!(internal_exec_ctx)
        )
    );
}
