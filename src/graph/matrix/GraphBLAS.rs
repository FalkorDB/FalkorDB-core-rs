/*
 * Copyright FalkorDB Ltd. 2023 - present
 * Licensed under the Server Side Public License v1 (SSPLv1).
 */

/* automatically generated by rust-bindgen 0.69.2 */
// bindgen --allowlist-file deps/GraphBLAS/Include/GraphBLAS.h deps/GraphBLAS/Include/GraphBLAS.h -o deps/FalkorDB-rs/src/graph/matrix/GraphBLAS.rs
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const GB_HAS_CMPLX_MACROS: u32 = 1;
pub const GxB_IMPLEMENTATION_NAME: &[u8; 22] = b"SuiteSparse:GraphBLAS\0";
pub const GxB_IMPLEMENTATION_DATE: &[u8; 13] = b"Mar 22, 2024\0";
pub const GxB_IMPLEMENTATION_MAJOR: u32 = 9;
pub const GxB_IMPLEMENTATION_MINOR: u32 = 1;
pub const GxB_IMPLEMENTATION_SUB: u32 = 0;
pub const GxB_SPEC_DATE: &[u8; 13] = b"Dec 22, 2023\0";
pub const GxB_SPEC_MAJOR: u32 = 2;
pub const GxB_SPEC_MINOR: u32 = 1;
pub const GxB_SPEC_SUB: u32 = 0;
pub const GRB_VERSION: u32 = 2;
pub const GRB_SUBVERSION: u32 = 1;
pub const GxB_NTHREADS: u32 = 7086;
pub const GxB_CHUNK: u32 = 7087;
pub const GxB_GPU_ID: u32 = 7088;
pub const GxB_MAX_NAME_LEN: u32 = 128;
pub const GxB_HYPERSPARSE: u32 = 1;
pub const GxB_SPARSE: u32 = 2;
pub const GxB_BITMAP: u32 = 4;
pub const GxB_FULL: u32 = 8;
pub const GxB_NBITMAP_SWITCH: u32 = 8;
pub const GxB_ANY_SPARSITY: u32 = 15;
pub const GxB_AUTO_SPARSITY: u32 = 15;
pub const GxB_RANGE: u64 = 9223372036854775807;
pub const GxB_STRIDE: u64 = 9223372036854775806;
pub const GxB_BACKWARDS: u64 = 9223372036854775805;
pub const GxB_BEGIN: u32 = 0;
pub const GxB_END: u32 = 1;
pub const GxB_INC: u32 = 2;
pub const GxB_COMPRESSION_NONE: i32 = -1;
pub const GxB_COMPRESSION_DEFAULT: u32 = 0;
pub const GxB_COMPRESSION_LZ4: u32 = 1000;
pub const GxB_COMPRESSION_LZ4HC: u32 = 2000;
pub const GxB_COMPRESSION_ZSTD: u32 = 3000;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_off_t = __int64_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
pub type GxB_FC32_t = __BindgenComplex<f32>;
pub type GxB_FC64_t = __BindgenComplex<f64>;
pub type GrB_Index = u64;
pub const GrB_Info_GrB_SUCCESS: GrB_Info = 0;
pub const GrB_Info_GrB_NO_VALUE: GrB_Info = 1;
pub const GrB_Info_GxB_EXHAUSTED: GrB_Info = 7089;
pub const GrB_Info_GrB_UNINITIALIZED_OBJECT: GrB_Info = -1;
pub const GrB_Info_GrB_NULL_POINTER: GrB_Info = -2;
pub const GrB_Info_GrB_INVALID_VALUE: GrB_Info = -3;
pub const GrB_Info_GrB_INVALID_INDEX: GrB_Info = -4;
pub const GrB_Info_GrB_DOMAIN_MISMATCH: GrB_Info = -5;
pub const GrB_Info_GrB_DIMENSION_MISMATCH: GrB_Info = -6;
pub const GrB_Info_GrB_OUTPUT_NOT_EMPTY: GrB_Info = -7;
pub const GrB_Info_GrB_NOT_IMPLEMENTED: GrB_Info = -8;
pub const GrB_Info_GrB_ALREADY_SET: GrB_Info = -9;
pub const GrB_Info_GrB_PANIC: GrB_Info = -101;
pub const GrB_Info_GrB_OUT_OF_MEMORY: GrB_Info = -102;
pub const GrB_Info_GrB_INSUFFICIENT_SPACE: GrB_Info = -103;
pub const GrB_Info_GrB_INVALID_OBJECT: GrB_Info = -104;
pub const GrB_Info_GrB_INDEX_OUT_OF_BOUNDS: GrB_Info = -105;
pub const GrB_Info_GrB_EMPTY_OBJECT: GrB_Info = -106;
pub type GrB_Info = ::std::os::raw::c_int;
pub const GrB_Mode_GrB_NONBLOCKING: GrB_Mode = 0;
pub const GrB_Mode_GrB_BLOCKING: GrB_Mode = 1;
pub const GrB_Mode_GxB_NONBLOCKING_GPU: GrB_Mode = 7099;
pub const GrB_Mode_GxB_BLOCKING_GPU: GrB_Mode = 7098;
pub type GrB_Mode = ::std::os::raw::c_uint;
extern "C" {
    pub fn GrB_init(mode: GrB_Mode) -> GrB_Info;
}
extern "C" {
    pub fn GxB_init(
        mode: GrB_Mode,
        user_malloc_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        user_calloc_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut ::std::os::raw::c_void,
        >,
        user_realloc_function: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
        user_free_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_finalize() -> GrB_Info;
}
extern "C" {
    pub fn GrB_getVersion(
        version: *mut ::std::os::raw::c_uint,
        subversion: *mut ::std::os::raw::c_uint,
    ) -> GrB_Info;
}
pub const GrB_Desc_Field_GrB_OUTP: GrB_Desc_Field = 0;
pub const GrB_Desc_Field_GrB_MASK: GrB_Desc_Field = 1;
pub const GrB_Desc_Field_GrB_INP0: GrB_Desc_Field = 2;
pub const GrB_Desc_Field_GrB_INP1: GrB_Desc_Field = 3;
pub const GrB_Desc_Field_GxB_AxB_METHOD: GrB_Desc_Field = 7090;
pub const GrB_Desc_Field_GxB_SORT: GrB_Desc_Field = 7091;
pub const GrB_Desc_Field_GxB_COMPRESSION: GrB_Desc_Field = 7092;
pub const GrB_Desc_Field_GxB_IMPORT: GrB_Desc_Field = 7093;
pub type GrB_Desc_Field = ::std::os::raw::c_uint;
pub const GrB_Desc_Value_GrB_DEFAULT: GrB_Desc_Value = 0;
pub const GrB_Desc_Value_GxB_DEFAULT: GrB_Desc_Value = 0;
pub const GrB_Desc_Value_GrB_REPLACE: GrB_Desc_Value = 1;
pub const GrB_Desc_Value_GrB_COMP: GrB_Desc_Value = 2;
pub const GrB_Desc_Value_GrB_STRUCTURE: GrB_Desc_Value = 4;
pub const GrB_Desc_Value_GrB_COMP_STRUCTURE: GrB_Desc_Value = 6;
pub const GrB_Desc_Value_GrB_TRAN: GrB_Desc_Value = 3;
pub const GrB_Desc_Value_GxB_AxB_GUSTAVSON: GrB_Desc_Value = 7081;
pub const GrB_Desc_Value_GxB_AxB_DOT: GrB_Desc_Value = 7083;
pub const GrB_Desc_Value_GxB_AxB_HASH: GrB_Desc_Value = 7084;
pub const GrB_Desc_Value_GxB_AxB_SAXPY: GrB_Desc_Value = 7085;
pub const GrB_Desc_Value_GxB_SECURE_IMPORT: GrB_Desc_Value = 7080;
pub type GrB_Desc_Value = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Descriptor_opaque {
    _unused: [u8; 0],
}
pub type GrB_Descriptor = *mut GB_Descriptor_opaque;
extern "C" {
    pub fn GrB_Descriptor_new(descriptor: *mut GrB_Descriptor) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_set(
        arg1: GrB_Descriptor,
        arg2: GrB_Desc_Field,
        arg3: GrB_Desc_Value,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Descriptor_get(
        arg1: *mut GrB_Desc_Value,
        arg2: GrB_Descriptor,
        arg3: GrB_Desc_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_set(
        arg1: GrB_Descriptor,
        arg2: GrB_Desc_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_set_INT32(
        arg1: GrB_Descriptor,
        arg2: GrB_Desc_Field,
        arg3: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_set_FP64(
        arg1: GrB_Descriptor,
        arg2: GrB_Desc_Field,
        arg3: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_get(
        arg1: GrB_Descriptor,
        arg2: GrB_Desc_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_get_INT32(
        arg1: GrB_Descriptor,
        arg2: GrB_Desc_Field,
        arg3: *mut i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_get_FP64(
        arg1: GrB_Descriptor,
        arg2: GrB_Desc_Field,
        arg3: *mut f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_free(descriptor: *mut GrB_Descriptor) -> GrB_Info;
}
extern "C" {
    pub static mut GrB_DESC_T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_T0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_T0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_C: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_CT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_CT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_CT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_S: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_ST1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_ST0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_ST0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SC: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SCT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SCT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SCT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_R: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RC: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RCT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RCT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RCT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RS: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RST1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RST0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RST0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSC: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSCT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSCT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSCT0T1: GrB_Descriptor;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Type_opaque {
    _unused: [u8; 0],
}
pub type GrB_Type = *mut GB_Type_opaque;
extern "C" {
    pub static mut GrB_BOOL: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT8: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT16: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT32: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT64: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT8: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT16: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT32: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT64: GrB_Type;
}
extern "C" {
    pub static mut GrB_FP32: GrB_Type;
}
extern "C" {
    pub static mut GrB_FP64: GrB_Type;
}
extern "C" {
    pub static mut GxB_FC32: GrB_Type;
}
extern "C" {
    pub static mut GxB_FC64: GrB_Type;
}
extern "C" {
    pub fn GrB_Type_new(
        type_: *mut GrB_Type,
        sizeof_ctype: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Type_new(
        type_: *mut GrB_Type,
        sizeof_ctype: usize,
        type_name: *const ::std::os::raw::c_char,
        type_defn: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Type_name(
        type_name: *mut ::std::os::raw::c_char,
        type_: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Type_size(
        size: *mut usize,
        type_: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Type_from_name(
        type_: *mut GrB_Type,
        type_name: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_free(type_: *mut GrB_Type) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_UnaryOp_opaque {
    _unused: [u8; 0],
}
pub type GrB_UnaryOp = *mut GB_UnaryOp_opaque;
extern "C" {
    pub static mut GrB_IDENTITY_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_IDENTITY_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_AINV_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_MINV_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_IDENTITY_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_AINV_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_MINV_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_LNOT: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LGAMMA_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TGAMMA_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERF_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERFC_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LGAMMA_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TGAMMA_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERF_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERFC_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CBRT_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CBRT_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPX_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPE_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPX_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPE_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CONJ_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CONJ_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CREAL_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CIMAG_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CARG_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CREAL_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CIMAG_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CARG_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FC64: GrB_UnaryOp;
}
pub type GxB_unary_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void),
>;
extern "C" {
    pub fn GrB_UnaryOp_new(
        unaryop: *mut GrB_UnaryOp,
        function: GxB_unary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_new(
        unaryop: *mut GrB_UnaryOp,
        function: GxB_unary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        unop_name: *const ::std::os::raw::c_char,
        unop_defn: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_ztype(
        ztype: *mut GrB_Type,
        unaryop: GrB_UnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_ztype_name(
        type_name: *mut ::std::os::raw::c_char,
        unaryop: GrB_UnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_xtype(
        xtype: *mut GrB_Type,
        unaryop: GrB_UnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_xtype_name(
        type_name: *mut ::std::os::raw::c_char,
        unaryop: GrB_UnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_free(unaryop: *mut GrB_UnaryOp) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_BinaryOp_opaque {
    _unused: [u8; 0],
}
pub type GrB_BinaryOp = *mut GB_BinaryOp_opaque;
extern "C" {
    pub static mut GrB_FIRST_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_ONEB_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRST_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECOND_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ONEB_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRST_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECOND_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ONEB_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PLUS_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_MINUS_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_TIMES_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_DIV_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PLUS_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_MINUS_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_TIMES_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_DIV_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LOR: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LAND: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LXOR: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LXNOR: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ATAN2_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_HYPOT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FMOD_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_REMAINDER_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ATAN2_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_HYPOT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FMOD_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_REMAINDER_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LDEXP_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_COPYSIGN_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LDEXP_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_COPYSIGN_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_EQ_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_NE_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_EQ_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_NE_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_CMPLX_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_CMPLX_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI1_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI1_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ1_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ1_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_IGNORE_DUP: GrB_BinaryOp;
}
pub type GxB_binary_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn GrB_BinaryOp_new(
        binaryop: *mut GrB_BinaryOp,
        function: GxB_binary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        ytype: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_new(
        op: *mut GrB_BinaryOp,
        function: GxB_binary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        ytype: GrB_Type,
        binop_name: *const ::std::os::raw::c_char,
        binop_defn: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_ztype(
        ztype: *mut GrB_Type,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_ztype_name(
        type_name: *mut ::std::os::raw::c_char,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_xtype(
        xtype: *mut GrB_Type,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_xtype_name(
        type_name: *mut ::std::os::raw::c_char,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_ytype(
        ytype: *mut GrB_Type,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_ytype_name(
        type_name: *mut ::std::os::raw::c_char,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_free(binaryop: *mut GrB_BinaryOp) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_SelectOp_opaque {
    _unused: [u8; 0],
}
pub type GxB_SelectOp = *mut GB_SelectOp_opaque;
extern "C" {
    pub static mut GxB_TRIL: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_TRIU: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_DIAG: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_OFFDIAG: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_NONZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_EQ_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GT_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GE_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LT_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LE_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_NE_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_EQ_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GT_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GE_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LT_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LE_THUNK: GxB_SelectOp;
}
extern "C" {
    pub fn GxB_SelectOp_xtype(
        xtype: *mut GrB_Type,
        selectop: GxB_SelectOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_ttype(
        ttype: *mut GrB_Type,
        selectop: GxB_SelectOp,
    ) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_IndexUnaryOp_opaque {
    _unused: [u8; 0],
}
pub type GrB_IndexUnaryOp = *mut GB_IndexUnaryOp_opaque;
pub type GxB_index_unary_function = ::std::option::Option<
    unsafe extern "C" fn(
        z: *mut ::std::os::raw::c_void,
        x: *const ::std::os::raw::c_void,
        i: GrB_Index,
        j: GrB_Index,
        y: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn GrB_IndexUnaryOp_new(
        op: *mut GrB_IndexUnaryOp,
        function: GxB_index_unary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        ytype: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_IndexUnaryOp_new(
        op: *mut GrB_IndexUnaryOp,
        function: GxB_index_unary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        ytype: GrB_Type,
        idxop_name: *const ::std::os::raw::c_char,
        idxop_defn: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_IndexUnaryOp_ztype_name(
        arg1: *mut ::std::os::raw::c_char,
        op: GrB_IndexUnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_IndexUnaryOp_xtype_name(
        arg1: *mut ::std::os::raw::c_char,
        op: GrB_IndexUnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_IndexUnaryOp_ytype_name(
        arg1: *mut ::std::os::raw::c_char,
        op: GrB_IndexUnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_free(op: *mut GrB_IndexUnaryOp) -> GrB_Info;
}
extern "C" {
    pub static mut GrB_ROWINDEX_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_ROWINDEX_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_COLINDEX_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_COLINDEX_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_DIAGINDEX_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_DIAGINDEX_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_TRIL: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_TRIU: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_DIAG: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_OFFDIAG: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_COLLE: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_COLGT: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_ROWLE: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_ROWGT: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_INT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_UINT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_FP32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_BOOL: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_INT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_UINT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_FP64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_UINT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GxB_VALUEEQ_FC32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEEQ_UINT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GxB_VALUEEQ_FC64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_INT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_UINT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_FP32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_BOOL: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_INT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_UINT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_FP64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_UINT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GxB_VALUENE_FC32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUENE_UINT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GxB_VALUENE_FC64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_INT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_UINT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_FP32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_BOOL: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_INT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_UINT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_FP64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_UINT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELT_UINT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_INT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_UINT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_FP32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_BOOL: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_INT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_UINT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_FP64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_UINT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUELE_UINT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_INT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_UINT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_FP32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_BOOL: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_INT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_UINT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_FP64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_UINT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGT_UINT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_INT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_UINT8: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_FP32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_BOOL: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_INT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_UINT16: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_FP64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_INT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_UINT32: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_INT64: GrB_IndexUnaryOp;
}
extern "C" {
    pub static mut GrB_VALUEGE_UINT64: GrB_IndexUnaryOp;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Monoid_opaque {
    _unused: [u8; 0],
}
pub type GrB_Monoid = *mut GB_Monoid_opaque;
extern "C" {
    pub fn GrB_Monoid_new_BOOL(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT8(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT8(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_FP32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_FP64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_new_FC32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC32_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_new_FC64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC64_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UDT(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_BOOL(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: bool,
        terminal: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT8(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i8,
        terminal: i8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT8(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u8,
        terminal: u8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i16,
        terminal: i16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u16,
        terminal: u16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i32,
        terminal: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u32,
        terminal: u32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i64,
        terminal: i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u64,
        terminal: u64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FP32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f32,
        terminal: f32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FP64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f64,
        terminal: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FC32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC32_t,
        terminal: GxB_FC32_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FC64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC64_t,
        terminal: GxB_FC64_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UDT(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: *mut ::std::os::raw::c_void,
        terminal: *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_operator(
        op: *mut GrB_BinaryOp,
        monoid: GrB_Monoid,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_identity(
        identity: *mut ::std::os::raw::c_void,
        monoid: GrB_Monoid,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal(
        arg1: *mut bool,
        terminal: *mut ::std::os::raw::c_void,
        monoid: GrB_Monoid,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_free(monoid: *mut GrB_Monoid) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Semiring_opaque {
    _unused: [u8; 0],
}
pub type GrB_Semiring = *mut GB_Semiring_opaque;
extern "C" {
    pub fn GrB_Semiring_new(
        semiring: *mut GrB_Semiring,
        add: GrB_Monoid,
        multiply: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Semiring_add(
        add: *mut GrB_Monoid,
        semiring: GrB_Semiring,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Semiring_multiply(
        multiply: *mut GrB_BinaryOp,
        semiring: GrB_Semiring,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_free(semiring: *mut GrB_Semiring) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Scalar_opaque {
    _unused: [u8; 0],
}
pub type GxB_Scalar = *mut GB_Scalar_opaque;
pub type GrB_Scalar = *mut GB_Scalar_opaque;
extern "C" {
    pub fn GrB_Scalar_new(
        s: *mut GrB_Scalar,
        type_: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_dup(
        s: *mut GrB_Scalar,
        t: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_clear(s: GrB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_nvals(
        nvals: *mut GrB_Index,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_type(
        type_: *mut GrB_Type,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_type_name(
        type_name: *mut ::std::os::raw::c_char,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_memoryUsage(
        size: *mut usize,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_free(s: *mut GrB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_new(
        s: *mut GrB_Scalar,
        type_: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_dup(
        s: *mut GrB_Scalar,
        t: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_clear(s: GrB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_nvals(
        nvals: *mut GrB_Index,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_free(s: *mut GrB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_BOOL(
        s: GrB_Scalar,
        x: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_INT8(
        s: GrB_Scalar,
        x: i8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_UINT8(
        s: GrB_Scalar,
        x: u8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_INT16(
        s: GrB_Scalar,
        x: i16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_UINT16(
        s: GrB_Scalar,
        x: u16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_INT32(
        s: GrB_Scalar,
        x: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_UINT32(
        s: GrB_Scalar,
        x: u32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_INT64(
        s: GrB_Scalar,
        x: i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_UINT64(
        s: GrB_Scalar,
        x: u64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_FP32(
        s: GrB_Scalar,
        x: f32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_FP64(
        s: GrB_Scalar,
        x: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FC32(
        s: GrB_Scalar,
        x: GxB_FC32_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FC64(
        s: GrB_Scalar,
        x: GxB_FC64_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_setElement_UDT(
        s: GrB_Scalar,
        x: *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_BOOL(
        s: GrB_Scalar,
        x: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT8(
        s: GrB_Scalar,
        x: i8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT16(
        s: GrB_Scalar,
        x: i16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT32(
        s: GrB_Scalar,
        x: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT64(
        s: GrB_Scalar,
        x: i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT8(
        s: GrB_Scalar,
        x: u8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT16(
        s: GrB_Scalar,
        x: u16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT32(
        s: GrB_Scalar,
        x: u32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT64(
        s: GrB_Scalar,
        x: u64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FP32(
        s: GrB_Scalar,
        x: f32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FP64(
        s: GrB_Scalar,
        x: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UDT(
        s: GrB_Scalar,
        x: *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_BOOL(
        x: *mut bool,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_INT8(
        x: *mut i8,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_UINT8(
        x: *mut u8,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_INT16(
        x: *mut i16,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_UINT16(
        x: *mut u16,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_INT32(
        x: *mut i32,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_UINT32(
        x: *mut u32,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_INT64(
        x: *mut i64,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_UINT64(
        x: *mut u64,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_FP32(
        x: *mut f32,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_FP64(
        x: *mut f64,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FC32(
        x: *mut GxB_FC32_t,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FC64(
        x: *mut GxB_FC64_t,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_extractElement_UDT(
        x: *mut ::std::os::raw::c_void,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_BOOL(
        x: *mut bool,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT8(
        x: *mut i8,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT16(
        x: *mut i16,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT32(
        x: *mut i32,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT64(
        x: *mut i64,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT8(
        x: *mut u8,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT16(
        x: *mut u16,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT32(
        x: *mut u32,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT64(
        x: *mut u64,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FP32(
        x: *mut f32,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FP64(
        x: *mut f64,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UDT(
        x: *mut ::std::os::raw::c_void,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Vector_opaque {
    _unused: [u8; 0],
}
pub type GrB_Vector = *mut GB_Vector_opaque;
extern "C" {
    pub fn GrB_Vector_new(
        v: *mut GrB_Vector,
        type_: GrB_Type,
        n: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_dup(
        w: *mut GrB_Vector,
        u: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_clear(v: GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_size(
        n: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_nvals(
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_type(
        type_: *mut GrB_Type,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_type_name(
        type_name: *mut ::std::os::raw::c_char,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_memoryUsage(
        size: *mut usize,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_iso(
        iso: *mut bool,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_free(v: *mut GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_BOOL(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const bool,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT8(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const i8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT8(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const u8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT16(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const i16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT16(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const u16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT32(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const i32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT32(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const u32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT64(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const i64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT64(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const u64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_FP32(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const f32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_FP64(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const f64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_build_FC32(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const GxB_FC32_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_build_FC64(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const GxB_FC64_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UDT(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        X: *const ::std::os::raw::c_void,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_build_Scalar(
        w: GrB_Vector,
        Ilist: *const GrB_Index,
        scalar: GrB_Scalar,
        nvals: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_BOOL(
        w: GrB_Vector,
        x: bool,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT8(
        w: GrB_Vector,
        x: i8,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT8(
        w: GrB_Vector,
        x: u8,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT16(
        w: GrB_Vector,
        x: i16,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT16(
        w: GrB_Vector,
        x: u16,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT32(
        w: GrB_Vector,
        x: i32,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT32(
        w: GrB_Vector,
        x: u32,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT64(
        w: GrB_Vector,
        x: i64,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT64(
        w: GrB_Vector,
        x: u64,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_FP32(
        w: GrB_Vector,
        x: f32,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_FP64(
        w: GrB_Vector,
        x: f64,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_setElement_FC32(
        w: GrB_Vector,
        x: GxB_FC32_t,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_setElement_FC64(
        w: GrB_Vector,
        x: GxB_FC64_t,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UDT(
        w: GrB_Vector,
        x: *mut ::std::os::raw::c_void,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_Scalar(
        w: GrB_Vector,
        x: GrB_Scalar,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_BOOL(
        x: *mut bool,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT8(
        x: *mut i8,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT8(
        x: *mut u8,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT16(
        x: *mut i16,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT16(
        x: *mut u16,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT32(
        x: *mut i32,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT32(
        x: *mut u32,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT64(
        x: *mut i64,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT64(
        x: *mut u64,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_FP32(
        x: *mut f32,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_FP64(
        x: *mut f64,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractElement_FC32(
        x: *mut GxB_FC32_t,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractElement_FC64(
        x: *mut GxB_FC64_t,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UDT(
        x: *mut ::std::os::raw::c_void,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_Scalar(
        x: GrB_Scalar,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_isStoredElement(
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_removeElement(
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_BOOL(
        Ilist: *mut GrB_Index,
        X: *mut bool,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT8(
        Ilist: *mut GrB_Index,
        X: *mut i8,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT8(
        Ilist: *mut GrB_Index,
        X: *mut u8,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT16(
        Ilist: *mut GrB_Index,
        X: *mut i16,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT16(
        Ilist: *mut GrB_Index,
        X: *mut u16,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT32(
        Ilist: *mut GrB_Index,
        X: *mut i32,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT32(
        Ilist: *mut GrB_Index,
        X: *mut u32,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT64(
        Ilist: *mut GrB_Index,
        X: *mut i64,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT64(
        Ilist: *mut GrB_Index,
        X: *mut u64,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_FP32(
        Ilist: *mut GrB_Index,
        X: *mut f32,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_FP64(
        Ilist: *mut GrB_Index,
        X: *mut f64,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractTuples_FC32(
        Ilist: *mut GrB_Index,
        X: *mut GxB_FC32_t,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractTuples_FC64(
        Ilist: *mut GrB_Index,
        X: *mut GxB_FC64_t,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UDT(
        Ilist: *mut GrB_Index,
        X: *mut ::std::os::raw::c_void,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Matrix_opaque {
    _unused: [u8; 0],
}
pub type GrB_Matrix = *mut GB_Matrix_opaque;
extern "C" {
    pub fn GrB_Matrix_new(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_dup(
        C: *mut GrB_Matrix,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_clear(A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_nrows(
        nrows: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_ncols(
        ncols: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_nvals(
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_type(
        type_: *mut GrB_Type,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_type_name(
        type_name: *mut ::std::os::raw::c_char,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_memoryUsage(
        size: *mut usize,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_iso(
        iso: *mut bool,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_free(A: *mut GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_BOOL(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const bool,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT8(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT8(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT16(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT16(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT32(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT32(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT64(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT64(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_FP32(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const f32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_FP64(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const f64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_build_FC32(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const GxB_FC32_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_build_FC64(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const GxB_FC64_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UDT(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        X: *const ::std::os::raw::c_void,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_build_Scalar(
        C: GrB_Matrix,
        Ilist: *const GrB_Index,
        J: *const GrB_Index,
        scalar: GrB_Scalar,
        nvals: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_BOOL(
        C: GrB_Matrix,
        x: bool,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT8(
        C: GrB_Matrix,
        x: i8,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT8(
        C: GrB_Matrix,
        x: u8,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT16(
        C: GrB_Matrix,
        x: i16,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT16(
        C: GrB_Matrix,
        x: u16,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT32(
        C: GrB_Matrix,
        x: i32,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT32(
        C: GrB_Matrix,
        x: u32,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT64(
        C: GrB_Matrix,
        x: i64,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT64(
        C: GrB_Matrix,
        x: u64,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_FP32(
        C: GrB_Matrix,
        x: f32,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_FP64(
        C: GrB_Matrix,
        x: f64,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_setElement_FC32(
        C: GrB_Matrix,
        x: GxB_FC32_t,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_setElement_FC64(
        C: GrB_Matrix,
        x: GxB_FC64_t,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UDT(
        C: GrB_Matrix,
        x: *mut ::std::os::raw::c_void,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_Scalar(
        C: GrB_Matrix,
        x: GrB_Scalar,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_BOOL(
        x: *mut bool,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT8(
        x: *mut i8,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT8(
        x: *mut u8,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT16(
        x: *mut i16,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT16(
        x: *mut u16,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT32(
        x: *mut i32,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT32(
        x: *mut u32,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT64(
        x: *mut i64,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT64(
        x: *mut u64,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_FP32(
        x: *mut f32,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_FP64(
        x: *mut f64,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractElement_FC32(
        x: *mut GxB_FC32_t,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractElement_FC64(
        x: *mut GxB_FC64_t,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UDT(
        x: *mut ::std::os::raw::c_void,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_Scalar(
        x: GrB_Scalar,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_isStoredElement(
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_removeElement(
        C: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_BOOL(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut bool,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT8(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i8,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT8(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u8,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT16(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i16,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT16(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u16,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT32(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i32,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT32(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u32,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT64(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i64,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT64(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u64,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_FP32(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut f32,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_FP64(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut f64,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractTuples_FC32(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut GxB_FC32_t,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractTuples_FC64(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut GxB_FC64_t,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UDT(
        Ilist: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut ::std::os::raw::c_void,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_concat(
        C: GrB_Matrix,
        Tiles: *const GrB_Matrix,
        m: GrB_Index,
        n: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_split(
        Tiles: *mut GrB_Matrix,
        m: GrB_Index,
        n: GrB_Index,
        Tile_nrows: *const GrB_Index,
        Tile_ncols: *const GrB_Index,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_diag(
        C: *mut GrB_Matrix,
        v: GrB_Vector,
        k: i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_diag(
        C: GrB_Matrix,
        v: GrB_Vector,
        k: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_diag(
        v: GrB_Vector,
        A: GrB_Matrix,
        k: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
pub const GxB_Option_Field_GxB_HYPER_SWITCH: GxB_Option_Field = 7000;
pub const GxB_Option_Field_GxB_HYPER_HASH: GxB_Option_Field = 7048;
pub const GxB_Option_Field_GxB_BITMAP_SWITCH: GxB_Option_Field = 7001;
pub const GxB_Option_Field_GxB_FORMAT: GxB_Option_Field = 7002;
pub const GxB_Option_Field_GxB_MODE: GxB_Option_Field = 7003;
pub const GxB_Option_Field_GxB_LIBRARY_NAME: GxB_Option_Field = 7004;
pub const GxB_Option_Field_GxB_LIBRARY_VERSION: GxB_Option_Field = 7005;
pub const GxB_Option_Field_GxB_LIBRARY_DATE: GxB_Option_Field = 7006;
pub const GxB_Option_Field_GxB_LIBRARY_ABOUT: GxB_Option_Field = 7007;
pub const GxB_Option_Field_GxB_LIBRARY_URL: GxB_Option_Field = 7008;
pub const GxB_Option_Field_GxB_LIBRARY_LICENSE: GxB_Option_Field = 7009;
pub const GxB_Option_Field_GxB_LIBRARY_COMPILE_DATE: GxB_Option_Field = 7010;
pub const GxB_Option_Field_GxB_LIBRARY_COMPILE_TIME: GxB_Option_Field = 7011;
pub const GxB_Option_Field_GxB_API_VERSION: GxB_Option_Field = 7012;
pub const GxB_Option_Field_GxB_API_DATE: GxB_Option_Field = 7013;
pub const GxB_Option_Field_GxB_API_ABOUT: GxB_Option_Field = 7014;
pub const GxB_Option_Field_GxB_API_URL: GxB_Option_Field = 7015;
pub const GxB_Option_Field_GxB_COMPILER_VERSION: GxB_Option_Field = 7016;
pub const GxB_Option_Field_GxB_COMPILER_NAME: GxB_Option_Field = 7017;
pub const GxB_Option_Field_GxB_LIBRARY_OPENMP: GxB_Option_Field = 7018;
pub const GxB_Option_Field_GxB_MALLOC_FUNCTION: GxB_Option_Field = 7037;
pub const GxB_Option_Field_GxB_CALLOC_FUNCTION: GxB_Option_Field = 7038;
pub const GxB_Option_Field_GxB_REALLOC_FUNCTION: GxB_Option_Field = 7039;
pub const GxB_Option_Field_GxB_FREE_FUNCTION: GxB_Option_Field = 7040;
pub const GxB_Option_Field_GxB_GLOBAL_NTHREADS: GxB_Option_Field = 7086;
pub const GxB_Option_Field_GxB_GLOBAL_CHUNK: GxB_Option_Field = 7087;
pub const GxB_Option_Field_GxB_GLOBAL_GPU_ID: GxB_Option_Field = 7088;
pub const GxB_Option_Field_GxB_BURBLE: GxB_Option_Field = 7019;
pub const GxB_Option_Field_GxB_PRINTF: GxB_Option_Field = 7020;
pub const GxB_Option_Field_GxB_FLUSH: GxB_Option_Field = 7021;
pub const GxB_Option_Field_GxB_MEMORY_POOL: GxB_Option_Field = 7022;
pub const GxB_Option_Field_GxB_PRINT_1BASED: GxB_Option_Field = 7023;
pub const GxB_Option_Field_GxB_JIT_C_COMPILER_NAME: GxB_Option_Field = 7024;
pub const GxB_Option_Field_GxB_JIT_C_COMPILER_FLAGS: GxB_Option_Field = 7025;
pub const GxB_Option_Field_GxB_JIT_C_LINKER_FLAGS: GxB_Option_Field = 7026;
pub const GxB_Option_Field_GxB_JIT_C_LIBRARIES: GxB_Option_Field = 7027;
pub const GxB_Option_Field_GxB_JIT_C_PREFACE: GxB_Option_Field = 7028;
pub const GxB_Option_Field_GxB_JIT_C_CONTROL: GxB_Option_Field = 7029;
pub const GxB_Option_Field_GxB_JIT_CACHE_PATH: GxB_Option_Field = 7030;
pub const GxB_Option_Field_GxB_JIT_C_CMAKE_LIBS: GxB_Option_Field = 7031;
pub const GxB_Option_Field_GxB_JIT_USE_CMAKE: GxB_Option_Field = 7032;
pub const GxB_Option_Field_GxB_JIT_ERROR_LOG: GxB_Option_Field = 7033;
pub const GxB_Option_Field_GxB_JIT_CUDA_PREFACE: GxB_Option_Field = 7100;
pub const GxB_Option_Field_GxB_SPARSITY_STATUS: GxB_Option_Field = 7034;
pub const GxB_Option_Field_GxB_IS_HYPER: GxB_Option_Field = 7035;
pub const GxB_Option_Field_GxB_SPARSITY_CONTROL: GxB_Option_Field = 7036;
pub type GxB_Option_Field = ::std::os::raw::c_uint;
pub const GxB_JIT_Control_GxB_JIT_OFF: GxB_JIT_Control = 0;
pub const GxB_JIT_Control_GxB_JIT_PAUSE: GxB_JIT_Control = 1;
pub const GxB_JIT_Control_GxB_JIT_RUN: GxB_JIT_Control = 2;
pub const GxB_JIT_Control_GxB_JIT_LOAD: GxB_JIT_Control = 3;
pub const GxB_JIT_Control_GxB_JIT_ON: GxB_JIT_Control = 4;
pub type GxB_JIT_Control = ::std::os::raw::c_uint;
pub const GxB_Format_Value_GxB_BY_ROW: GxB_Format_Value = 0;
pub const GxB_Format_Value_GxB_BY_COL: GxB_Format_Value = 1;
pub const GxB_Format_Value_GxB_NO_FORMAT: GxB_Format_Value = -1;
pub type GxB_Format_Value = ::std::os::raw::c_int;
extern "C" {
    pub static GxB_FORMAT_DEFAULT: GxB_Format_Value;
}
extern "C" {
    pub static GxB_HYPER_DEFAULT: f64;
}
extern "C" {
    pub static GxB_ALWAYS_HYPER: f64;
}
extern "C" {
    pub static GxB_NEVER_HYPER: f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Context_opaque {
    _unused: [u8; 0],
}
pub type GxB_Context = *mut GB_Context_opaque;
extern "C" {
    pub static mut GxB_CONTEXT_WORLD: GxB_Context;
}
pub const GxB_Context_Field_GxB_CONTEXT_NTHREADS: GxB_Context_Field = 7086;
pub const GxB_Context_Field_GxB_CONTEXT_CHUNK: GxB_Context_Field = 7087;
pub const GxB_Context_Field_GxB_CONTEXT_GPU_ID: GxB_Context_Field = 7088;
pub type GxB_Context_Field = ::std::os::raw::c_uint;
extern "C" {
    pub fn GxB_Context_new(Context: *mut GxB_Context) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_free(Context: *mut GxB_Context) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_engage(Context: GxB_Context) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_disengage(Context: GxB_Context) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Option_set(
        arg1: GrB_Matrix,
        arg2: GxB_Option_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Option_set_INT32(
        arg1: GrB_Matrix,
        arg2: GxB_Option_Field,
        arg3: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Option_set_FP64(
        arg1: GrB_Matrix,
        arg2: GxB_Option_Field,
        arg3: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Option_get(
        arg1: GrB_Matrix,
        arg2: GxB_Option_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Option_get_INT32(
        arg1: GrB_Matrix,
        arg2: GxB_Option_Field,
        arg3: *mut i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Option_get_FP64(
        arg1: GrB_Matrix,
        arg2: GxB_Option_Field,
        arg3: *mut f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_set(
        arg1: GrB_Vector,
        arg2: GxB_Option_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_set_INT32(
        arg1: GrB_Vector,
        arg2: GxB_Option_Field,
        arg3: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_set_FP64(
        arg1: GrB_Vector,
        arg2: GxB_Option_Field,
        arg3: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_get(
        arg1: GrB_Vector,
        arg2: GxB_Option_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_get_INT32(
        arg1: GrB_Vector,
        arg2: GxB_Option_Field,
        arg3: *mut i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_get_FP64(
        arg1: GrB_Vector,
        arg2: GxB_Option_Field,
        arg3: *mut f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set(
        arg1: GxB_Option_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set_INT32(
        arg1: GxB_Option_Field,
        arg2: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set_FP64(
        arg1: GxB_Option_Field,
        arg2: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set_FP64_ARRAY(
        arg1: GxB_Option_Field,
        arg2: *mut f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set_INT64_ARRAY(
        arg1: GxB_Option_Field,
        arg2: *mut i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set_CHAR(
        arg1: GxB_Option_Field,
        arg2: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set_FUNCTION(
        arg1: GxB_Option_Field,
        arg2: *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_get(
        arg1: GxB_Option_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_get_INT32(
        arg1: GxB_Option_Field,
        arg2: *mut i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_get_FP64(
        arg1: GxB_Option_Field,
        arg2: *mut f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_get_INT64(
        arg1: GxB_Option_Field,
        arg2: *mut i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_get_CHAR(
        arg1: GxB_Option_Field,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_get_FUNCTION(
        arg1: GxB_Option_Field,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_set_INT32(
        arg1: GxB_Context,
        arg2: GxB_Context_Field,
        arg3: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_set_FP64(
        arg1: GxB_Context,
        arg2: GxB_Context_Field,
        arg3: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_set(
        arg1: GxB_Context,
        arg2: GxB_Context_Field,
        ...
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get_INT32(
        arg1: GxB_Context,
        arg2: GxB_Context_Field,
        arg3: *mut i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get_FP64(
        arg1: GxB_Context,
        arg2: GxB_Context_Field,
        arg3: *mut f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get(
        arg1: GxB_Context,
        arg2: GxB_Context_Field,
        ...
    ) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Global_opaque {
    _unused: [u8; 0],
}
pub type GrB_Global = *mut GB_Global_opaque;
extern "C" {
    pub static GrB_GLOBAL: GrB_Global;
}
pub const GrB_Field_GrB_OUTP_FIELD: GrB_Field = 0;
pub const GrB_Field_GrB_MASK_FIELD: GrB_Field = 1;
pub const GrB_Field_GrB_INP0_FIELD: GrB_Field = 2;
pub const GrB_Field_GrB_INP1_FIELD: GrB_Field = 3;
pub const GrB_Field_GrB_NAME: GrB_Field = 10;
pub const GrB_Field_GrB_LIBRARY_VER_MAJOR: GrB_Field = 11;
pub const GrB_Field_GrB_LIBRARY_VER_MINOR: GrB_Field = 12;
pub const GrB_Field_GrB_LIBRARY_VER_PATCH: GrB_Field = 13;
pub const GrB_Field_GrB_API_VER_MAJOR: GrB_Field = 14;
pub const GrB_Field_GrB_API_VER_MINOR: GrB_Field = 15;
pub const GrB_Field_GrB_API_VER_PATCH: GrB_Field = 16;
pub const GrB_Field_GrB_BLOCKING_MODE: GrB_Field = 17;
pub const GrB_Field_GrB_STORAGE_ORIENTATION_HINT: GrB_Field = 100;
pub const GrB_Field_GrB_EL_TYPE_CODE: GrB_Field = 102;
pub const GrB_Field_GrB_EL_TYPE_STRING: GrB_Field = 106;
pub const GrB_Field_GrB_INP0_TYPE_CODE: GrB_Field = 103;
pub const GrB_Field_GrB_INP1_TYPE_CODE: GrB_Field = 104;
pub const GrB_Field_GrB_OUTP_TYPE_CODE: GrB_Field = 105;
pub const GrB_Field_GrB_INP0_TYPE_STRING: GrB_Field = 107;
pub const GrB_Field_GrB_INP1_TYPE_STRING: GrB_Field = 108;
pub const GrB_Field_GrB_OUTP_TYPE_STRING: GrB_Field = 109;
pub const GrB_Field_GrB_SIZE: GrB_Field = 110;
pub const GrB_Field_GxB_JIT_C_NAME: GrB_Field = 7041;
pub const GrB_Field_GxB_JIT_C_DEFINITION: GrB_Field = 7042;
pub const GrB_Field_GxB_MONOID_IDENTITY: GrB_Field = 7043;
pub const GrB_Field_GxB_MONOID_TERMINAL: GrB_Field = 7044;
pub const GrB_Field_GxB_MONOID_OPERATOR: GrB_Field = 7045;
pub const GrB_Field_GxB_SEMIRING_MONOID: GrB_Field = 7046;
pub const GrB_Field_GxB_SEMIRING_MULTIPLY: GrB_Field = 7047;
pub type GrB_Field = ::std::os::raw::c_uint;
pub const GrB_Orientation_GrB_ROWMAJOR: GrB_Orientation = 0;
pub const GrB_Orientation_GrB_COLMAJOR: GrB_Orientation = 1;
pub const GrB_Orientation_GrB_BOTH: GrB_Orientation = 2;
pub const GrB_Orientation_GrB_UNKNOWN: GrB_Orientation = 3;
pub type GrB_Orientation = ::std::os::raw::c_uint;
pub const GrB_Type_Code_GrB_UDT_CODE: GrB_Type_Code = 0;
pub const GrB_Type_Code_GrB_BOOL_CODE: GrB_Type_Code = 1;
pub const GrB_Type_Code_GrB_INT8_CODE: GrB_Type_Code = 2;
pub const GrB_Type_Code_GrB_UINT8_CODE: GrB_Type_Code = 3;
pub const GrB_Type_Code_GrB_INT16_CODE: GrB_Type_Code = 4;
pub const GrB_Type_Code_GrB_UINT16_CODE: GrB_Type_Code = 5;
pub const GrB_Type_Code_GrB_INT32_CODE: GrB_Type_Code = 6;
pub const GrB_Type_Code_GrB_UINT32_CODE: GrB_Type_Code = 7;
pub const GrB_Type_Code_GrB_INT64_CODE: GrB_Type_Code = 8;
pub const GrB_Type_Code_GrB_UINT64_CODE: GrB_Type_Code = 9;
pub const GrB_Type_Code_GrB_FP32_CODE: GrB_Type_Code = 10;
pub const GrB_Type_Code_GrB_FP64_CODE: GrB_Type_Code = 11;
pub const GrB_Type_Code_GxB_FC32_CODE: GrB_Type_Code = 7070;
pub const GrB_Type_Code_GxB_FC64_CODE: GrB_Type_Code = 7071;
pub type GrB_Type_Code = ::std::os::raw::c_uint;
extern "C" {
    pub fn GrB_Scalar_get_Scalar(
        arg1: GrB_Scalar,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_get_String(
        arg1: GrB_Scalar,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_get_INT32(
        arg1: GrB_Scalar,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_get_SIZE(
        arg1: GrB_Scalar,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_get_VOID(
        arg1: GrB_Scalar,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_get_Scalar(
        arg1: GrB_Vector,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_get_String(
        arg1: GrB_Vector,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_get_INT32(
        arg1: GrB_Vector,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_get_SIZE(
        arg1: GrB_Vector,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_get_VOID(
        arg1: GrB_Vector,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_get_Scalar(
        arg1: GrB_Matrix,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_get_String(
        arg1: GrB_Matrix,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_get_INT32(
        arg1: GrB_Matrix,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_get_SIZE(
        arg1: GrB_Matrix,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_get_VOID(
        arg1: GrB_Matrix,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Serialized_get_Scalar(
        arg1: *const ::std::os::raw::c_void,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Serialized_get_String(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Serialized_get_INT32(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut i32,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Serialized_get_SIZE(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut usize,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Serialized_get_VOID(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_get_Scalar(
        arg1: GrB_UnaryOp,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_get_String(
        arg1: GrB_UnaryOp,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_get_INT32(
        arg1: GrB_UnaryOp,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_get_SIZE(
        arg1: GrB_UnaryOp,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_get_VOID(
        arg1: GrB_UnaryOp,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_get_Scalar(
        arg1: GrB_IndexUnaryOp,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_get_String(
        arg1: GrB_IndexUnaryOp,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_get_INT32(
        arg1: GrB_IndexUnaryOp,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_get_SIZE(
        arg1: GrB_IndexUnaryOp,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_get_VOID(
        arg1: GrB_IndexUnaryOp,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_get_Scalar(
        arg1: GrB_BinaryOp,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_get_String(
        arg1: GrB_BinaryOp,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_get_INT32(
        arg1: GrB_BinaryOp,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_get_SIZE(
        arg1: GrB_BinaryOp,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_get_VOID(
        arg1: GrB_BinaryOp,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_get_Scalar(
        arg1: GrB_Monoid,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_get_String(
        arg1: GrB_Monoid,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_get_INT32(
        arg1: GrB_Monoid,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_get_SIZE(
        arg1: GrB_Monoid,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_get_VOID(
        arg1: GrB_Monoid,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_get_Scalar(
        arg1: GrB_Semiring,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_get_String(
        arg1: GrB_Semiring,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_get_INT32(
        arg1: GrB_Semiring,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_get_SIZE(
        arg1: GrB_Semiring,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_get_VOID(
        arg1: GrB_Semiring,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_get_Scalar(
        arg1: GrB_Descriptor,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_get_String(
        arg1: GrB_Descriptor,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_get_INT32(
        arg1: GrB_Descriptor,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_get_SIZE(
        arg1: GrB_Descriptor,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_get_VOID(
        arg1: GrB_Descriptor,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_get_Scalar(
        arg1: GrB_Type,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_get_String(
        arg1: GrB_Type,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_get_INT32(
        arg1: GrB_Type,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_get_SIZE(
        arg1: GrB_Type,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_get_VOID(
        arg1: GrB_Type,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_get_Scalar(
        arg1: GrB_Global,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_get_String(
        arg1: GrB_Global,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_get_INT32(
        arg1: GrB_Global,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_get_SIZE(
        arg1: GrB_Global,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_get_VOID(
        arg1: GrB_Global,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get_Scalar(
        arg1: GxB_Context,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get_String(
        arg1: GxB_Context,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get_INT(
        arg1: GxB_Context,
        arg2: *mut i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get_SIZE(
        arg1: GxB_Context,
        arg2: *mut usize,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_get_VOID(
        arg1: GxB_Context,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_set_Scalar(
        arg1: GrB_Scalar,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_set_String(
        arg1: GrB_Scalar,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_set_INT32(
        arg1: GrB_Scalar,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_set_VOID(
        arg1: GrB_Scalar,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_set_Scalar(
        arg1: GrB_Vector,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_set_String(
        arg1: GrB_Vector,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_set_INT32(
        arg1: GrB_Vector,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_set_VOID(
        arg1: GrB_Vector,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_set_Scalar(
        arg1: GrB_Matrix,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_set_String(
        arg1: GrB_Matrix,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_set_INT32(
        arg1: GrB_Matrix,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_set_VOID(
        arg1: GrB_Matrix,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_set_Scalar(
        arg1: GrB_UnaryOp,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_set_String(
        arg1: GrB_UnaryOp,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_set_INT32(
        arg1: GrB_UnaryOp,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_set_VOID(
        arg1: GrB_UnaryOp,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_set_Scalar(
        arg1: GrB_IndexUnaryOp,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_set_String(
        arg1: GrB_IndexUnaryOp,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_set_INT32(
        arg1: GrB_IndexUnaryOp,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_set_VOID(
        arg1: GrB_IndexUnaryOp,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_set_Scalar(
        arg1: GrB_BinaryOp,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_set_String(
        arg1: GrB_BinaryOp,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_set_INT32(
        arg1: GrB_BinaryOp,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_set_VOID(
        arg1: GrB_BinaryOp,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_set_Scalar(
        arg1: GrB_Monoid,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_set_String(
        arg1: GrB_Monoid,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_set_INT32(
        arg1: GrB_Monoid,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_set_VOID(
        arg1: GrB_Monoid,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_set_Scalar(
        arg1: GrB_Semiring,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_set_String(
        arg1: GrB_Semiring,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_set_INT32(
        arg1: GrB_Semiring,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_set_VOID(
        arg1: GrB_Semiring,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_set_Scalar(
        arg1: GrB_Descriptor,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_set_String(
        arg1: GrB_Descriptor,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_set_INT32(
        arg1: GrB_Descriptor,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_set_VOID(
        arg1: GrB_Descriptor,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_set_Scalar(
        arg1: GrB_Type,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_set_String(
        arg1: GrB_Type,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_set_INT32(
        arg1: GrB_Type,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_set_VOID(
        arg1: GrB_Type,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_set_Scalar(
        arg1: GrB_Global,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_set_String(
        arg1: GrB_Global,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_set_INT32(
        arg1: GrB_Global,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Global_set_VOID(
        arg1: GrB_Global,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_set_Scalar(
        arg1: GxB_Context,
        arg2: GrB_Scalar,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_set_String(
        arg1: GxB_Context,
        arg2: *mut ::std::os::raw::c_char,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_set_INT(
        arg1: GxB_Context,
        arg2: i32,
        arg3: GrB_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_set_VOID(
        arg1: GxB_Context,
        arg2: *mut ::std::os::raw::c_void,
        arg3: GrB_Field,
        arg4: usize,
    ) -> GrB_Info;
}
pub const GrB_WaitMode_GrB_COMPLETE: GrB_WaitMode = 0;
pub const GrB_WaitMode_GrB_MATERIALIZE: GrB_WaitMode = 1;
pub type GrB_WaitMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn GrB_Type_wait(
        type_: GrB_Type,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_wait(
        op: GrB_UnaryOp,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_wait(
        op: GrB_BinaryOp,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_wait(
        op: GrB_IndexUnaryOp,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_wait(
        monoid: GrB_Monoid,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_wait(
        semiring: GrB_Semiring,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_wait(
        desc: GrB_Descriptor,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_wait(
        s: GrB_Scalar,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_wait(
        v: GrB_Vector,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_wait(
        A: GrB_Matrix,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_wait(
        Context: GxB_Context,
        waitmode: GrB_WaitMode,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_wait(s: *mut GrB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_error(
        error: *mut *const ::std::os::raw::c_char,
        type_: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_error(
        error: *mut *const ::std::os::raw::c_char,
        op: GrB_UnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_error(
        error: *mut *const ::std::os::raw::c_char,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_IndexUnaryOp_error(
        error: *mut *const ::std::os::raw::c_char,
        op: GrB_IndexUnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_error(
        error: *mut *const ::std::os::raw::c_char,
        monoid: GrB_Monoid,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_error(
        error: *mut *const ::std::os::raw::c_char,
        semiring: GrB_Semiring,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Scalar_error(
        error: *mut *const ::std::os::raw::c_char,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_error(
        error: *mut *const ::std::os::raw::c_char,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_error(
        error: *mut *const ::std::os::raw::c_char,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_error(
        error: *mut *const ::std::os::raw::c_char,
        d: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_error(
        error: *mut *const ::std::os::raw::c_char,
        s: GrB_Scalar,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_error(
        error: *mut *const ::std::os::raw::c_char,
        Context: GxB_Context,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_mxm(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_vxm(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        u: GrB_Vector,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_mxv(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseMult_Semiring(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseMult_Monoid(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseMult_BinaryOp(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        mult: GrB_BinaryOp,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseMult_Semiring(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseMult_Monoid(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseMult_BinaryOp(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        mult: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseAdd_Semiring(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseAdd_Monoid(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseAdd_BinaryOp(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        add: GrB_BinaryOp,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseAdd_Semiring(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseAdd_Monoid(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseAdd_BinaryOp(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        add: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_eWiseUnion(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        add: GrB_BinaryOp,
        u: GrB_Vector,
        alpha: GrB_Scalar,
        v: GrB_Vector,
        beta: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_eWiseUnion(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        add: GrB_BinaryOp,
        A: GrB_Matrix,
        alpha: GrB_Scalar,
        B: GrB_Matrix,
        beta: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub static mut GrB_ALL: *const u64;
}
extern "C" {
    pub fn GrB_Vector_extract(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extract(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Col_extract(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        j: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Col_subassign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        j: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Row_subassign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        i: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: bool,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_Scalar(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GrB_Scalar,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: bool,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_Scalar(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GrB_Scalar,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Col_assign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        j: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Row_assign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        i: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: bool,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_assign_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_assign_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_Scalar(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GrB_Scalar,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: bool,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u8,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u16,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f32,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f64,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_assign_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_assign_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_Scalar(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GrB_Scalar,
        Ilist: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_UnaryOp,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_UnaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_Scalar(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GrB_Scalar,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp1st(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GrB_Scalar,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: bool,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i8,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i16,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i32,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i64,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u8,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u16,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u32,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u64,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f32,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f64,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp1st_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC32_t,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp1st_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC64_t,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: *const ::std::os::raw::c_void,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_Scalar(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp2nd(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp2nd_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp2nd_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_Scalar(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_IndexOp_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_IndexOp_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_IndexOp_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_Scalar(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GrB_Scalar,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp1st(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GrB_Scalar,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: bool,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i8,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i16,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i32,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i64,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u8,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u16,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u32,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u64,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f32,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f64,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp1st_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC32_t,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp1st_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC64_t,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: *const ::std::os::raw::c_void,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_Scalar(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp2nd(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp2nd_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp2nd_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_Scalar(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_IndexOp_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_IndexOp_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_IndexOp_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_Scalar(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_select_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_select_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_select_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        u: GrB_Vector,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_Scalar(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_select_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_select_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_select_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_IndexUnaryOp,
        A: GrB_Matrix,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_select(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GxB_SelectOp,
        u: GrB_Vector,
        Thunk: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_select(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GxB_SelectOp,
        A: GrB_Matrix,
        Thunk: GrB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_Monoid(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_BinaryOp(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_BOOL(
        c: *mut bool,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT8(
        c: *mut i8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT8(
        c: *mut u8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT16(
        c: *mut i16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT16(
        c: *mut u16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT32(
        c: *mut i32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT32(
        c: *mut u32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT64(
        c: *mut i64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT64(
        c: *mut u64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_FP32(
        c: *mut f32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_FP64(
        c: *mut f64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_reduce_FC32(
        c: *mut GxB_FC32_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_reduce_FC64(
        c: *mut GxB_FC64_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UDT(
        c: *mut ::std::os::raw::c_void,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_Monoid_Scalar(
        c: GrB_Scalar,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_BinaryOp_Scalar(
        c: GrB_Scalar,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_BOOL(
        c: *mut bool,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT8(
        c: *mut i8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT8(
        c: *mut u8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT16(
        c: *mut i16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT16(
        c: *mut u16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT32(
        c: *mut i32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT32(
        c: *mut u32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT64(
        c: *mut i64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT64(
        c: *mut u64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_FP32(
        c: *mut f32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_FP64(
        c: *mut f64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_reduce_FC32(
        c: *mut GxB_FC32_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_reduce_FC64(
        c: *mut GxB_FC64_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UDT(
        c: *mut ::std::os::raw::c_void,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_Monoid_Scalar(
        c: GrB_Scalar,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_BinaryOp_Scalar(
        S: GrB_Scalar,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_transpose(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_kron(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_kronecker_BinaryOp(
        C: GrB_Matrix,
        M: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_kronecker_Monoid(
        C: GrB_Matrix,
        M: GrB_Matrix,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_kronecker_Semiring(
        C: GrB_Matrix,
        M: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub static mut GxB_MIN_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FC32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FC64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FC32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FC64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FC32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FC64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LOR_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LAND_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LXOR_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LXNOR_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_EQ_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LOR_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LAND_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LXOR_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LXNOR_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LOR_LAND_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LAND_LOR_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LXOR_LAND_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LXNOR_LOR_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub fn GrB_Matrix_resize(
        C: GrB_Matrix,
        nrows_new: GrB_Index,
        ncols_new: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_resize(
        w: GrB_Vector,
        nrows_new: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_resize(
        C: GrB_Matrix,
        nrows_new: GrB_Index,
        ncols_new: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_resize(
        w: GrB_Vector,
        nrows_new: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Pending(
        A: GrB_Matrix,
        pending: *mut bool,
    ) -> GrB_Info;
}
pub const GxB_Print_Level_GxB_SILENT: GxB_Print_Level = 0;
pub const GxB_Print_Level_GxB_SUMMARY: GxB_Print_Level = 1;
pub const GxB_Print_Level_GxB_SHORT: GxB_Print_Level = 2;
pub const GxB_Print_Level_GxB_COMPLETE: GxB_Print_Level = 3;
pub const GxB_Print_Level_GxB_SHORT_VERBOSE: GxB_Print_Level = 4;
pub const GxB_Print_Level_GxB_COMPLETE_VERBOSE: GxB_Print_Level = 5;
pub type GxB_Print_Level = ::std::os::raw::c_uint;
extern "C" {
    pub fn GxB_Type_fprint(
        type_: GrB_Type,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_fprint(
        unaryop: GrB_UnaryOp,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_fprint(
        binaryop: GrB_BinaryOp,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_IndexUnaryOp_fprint(
        op: GrB_IndexUnaryOp,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_fprint(
        op: GxB_SelectOp,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_fprint(
        monoid: GrB_Monoid,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Semiring_fprint(
        semiring: GrB_Semiring,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Descriptor_fprint(
        descriptor: GrB_Descriptor,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_fprint(
        A: GrB_Matrix,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_fprint(
        v: GrB_Vector,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_fprint(
        s: GrB_Scalar,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Context_fprint(
        Context: GxB_Context,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_CSR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Aj_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_CSR(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Aj_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_CSC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ai_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_CSC(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ai_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_HyperCSR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ah_size: GrB_Index,
        Aj_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvec: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_HyperCSR(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ah_size: GrB_Index,
        Aj_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvec: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_HyperCSC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ah_size: GrB_Index,
        Ai_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvec: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_HyperCSC(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ah_size: GrB_Index,
        Ai_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvec: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_BitmapR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_BitmapR(
        A: GrB_Matrix,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_BitmapC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_BitmapC(
        A: GrB_Matrix,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: GrB_Index,
        Ax_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_FullR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: GrB_Index,
        iso: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_FullR(
        A: GrB_Matrix,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: GrB_Index,
        iso: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_FullC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: GrB_Index,
        iso: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_pack_FullC(
        A: GrB_Matrix,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: GrB_Index,
        iso: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_import_CSC(
        v: *mut GrB_Vector,
        type_: GrB_Type,
        n: GrB_Index,
        vi: *mut *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vi_size: GrB_Index,
        vx_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_pack_CSC(
        v: GrB_Vector,
        vi: *mut *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vi_size: GrB_Index,
        vx_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_import_Bitmap(
        v: *mut GrB_Vector,
        type_: GrB_Type,
        n: GrB_Index,
        vb: *mut *mut i8,
        vx: *mut *mut ::std::os::raw::c_void,
        vb_size: GrB_Index,
        vx_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_pack_Bitmap(
        v: GrB_Vector,
        vb: *mut *mut i8,
        vx: *mut *mut ::std::os::raw::c_void,
        vb_size: GrB_Index,
        vx_size: GrB_Index,
        iso: bool,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_import_Full(
        v: *mut GrB_Vector,
        type_: GrB_Type,
        n: GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vx_size: GrB_Index,
        iso: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_pack_Full(
        v: GrB_Vector,
        vx: *mut *mut ::std::os::raw::c_void,
        vx_size: GrB_Index,
        iso: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_CSR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Aj_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_CSR(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Aj_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_CSC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ai_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_CSC(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ai_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_HyperCSR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ah_size: *mut GrB_Index,
        Aj_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvec: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_HyperCSR(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ah_size: *mut GrB_Index,
        Aj_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvec: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_HyperCSC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ah_size: *mut GrB_Index,
        Ai_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvec: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_HyperCSC(
        A: GrB_Matrix,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ah_size: *mut GrB_Index,
        Ai_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvec: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_BitmapR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_BitmapR(
        A: GrB_Matrix,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_BitmapC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_BitmapC(
        A: GrB_Matrix,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_FullR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_FullR(
        A: GrB_Matrix,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_FullC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_unpack_FullC(
        A: GrB_Matrix,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: *mut GrB_Index,
        iso: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_export_CSC(
        v: *mut GrB_Vector,
        type_: *mut GrB_Type,
        n: *mut GrB_Index,
        vi: *mut *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vi_size: *mut GrB_Index,
        vx_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_unpack_CSC(
        v: GrB_Vector,
        vi: *mut *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vi_size: *mut GrB_Index,
        vx_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_export_Bitmap(
        v: *mut GrB_Vector,
        type_: *mut GrB_Type,
        n: *mut GrB_Index,
        vb: *mut *mut i8,
        vx: *mut *mut ::std::os::raw::c_void,
        vb_size: *mut GrB_Index,
        vx_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_unpack_Bitmap(
        v: GrB_Vector,
        vb: *mut *mut i8,
        vx: *mut *mut ::std::os::raw::c_void,
        vb_size: *mut GrB_Index,
        vx_size: *mut GrB_Index,
        iso: *mut bool,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_export_Full(
        v: *mut GrB_Vector,
        type_: *mut GrB_Type,
        n: *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vx_size: *mut GrB_Index,
        iso: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_unpack_Full(
        v: GrB_Vector,
        vx: *mut *mut ::std::os::raw::c_void,
        vx_size: *mut GrB_Index,
        iso: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_unpack_HyperHash(
        A: GrB_Matrix,
        Y: *mut GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_pack_HyperHash(
        A: GrB_Matrix,
        Y: *mut GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
pub const GrB_Format_GrB_CSR_FORMAT: GrB_Format = 0;
pub const GrB_Format_GrB_CSC_FORMAT: GrB_Format = 1;
pub const GrB_Format_GrB_COO_FORMAT: GrB_Format = 2;
pub type GrB_Format = ::std::os::raw::c_uint;
extern "C" {
    pub fn GrB_Matrix_import_BOOL(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const bool,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_INT8(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const i8,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_INT16(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const i16,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_INT32(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const i32,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_INT64(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const i64,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_UINT8(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const u8,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_UINT16(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const u16,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_UINT32(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const u32,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_UINT64(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const u64,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_FP32(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const f32,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_FP64(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const f64,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_FC32(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const GxB_FC32_t,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_FC64(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const GxB_FC64_t,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_import_UDT(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *const GrB_Index,
        Ai: *const GrB_Index,
        Ax: *const ::std::os::raw::c_void,
        Ap_len: GrB_Index,
        Ai_len: GrB_Index,
        Ax_len: GrB_Index,
        format: GrB_Format,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_BOOL(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut bool,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_INT8(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut i8,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_INT16(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut i16,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_INT32(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut i32,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_INT64(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut i64,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_UINT8(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut u8,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_UINT16(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut u16,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_UINT32(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut u32,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_UINT64(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut u64,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_FP32(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut f32,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_FP64(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut f64,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_FC32(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut GxB_FC32_t,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_FC64(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut GxB_FC64_t,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_export_UDT(
        Ap: *mut GrB_Index,
        Ai: *mut GrB_Index,
        Ax: *mut ::std::os::raw::c_void,
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_exportSize(
        Ap_len: *mut GrB_Index,
        Ai_len: *mut GrB_Index,
        Ax_len: *mut GrB_Index,
        format: GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_exportHint(
        format: *mut GrB_Format,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_serialize(
        blob_handle: *mut *mut ::std::os::raw::c_void,
        blob_size_handle: *mut GrB_Index,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_serialize(
        blob: *mut ::std::os::raw::c_void,
        blob_size_handle: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_serialize(
        blob_handle: *mut *mut ::std::os::raw::c_void,
        blob_size_handle: *mut GrB_Index,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_serializeSize(
        blob_size_handle: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_deserialize(
        C: *mut GrB_Matrix,
        type_: GrB_Type,
        blob: *const ::std::os::raw::c_void,
        blob_size: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_deserialize(
        C: *mut GrB_Matrix,
        type_: GrB_Type,
        blob: *const ::std::os::raw::c_void,
        blob_size: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_deserialize(
        w: *mut GrB_Vector,
        type_: GrB_Type,
        blob: *const ::std::os::raw::c_void,
        blob_size: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_deserialize_type_name(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_void,
        arg3: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_sort(
        w: GrB_Vector,
        p: GrB_Vector,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_sort(
        C: GrB_Matrix,
        P: GrB_Matrix,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_reshape(
        C: GrB_Matrix,
        by_col: bool,
        nrows_new: GrB_Index,
        ncols_new: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_reshapeDup(
        C: *mut GrB_Matrix,
        A: GrB_Matrix,
        by_col: bool,
        nrows_new: GrB_Index,
        ncols_new: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Iterator_opaque {
    pub pstart: i64,
    pub pend: i64,
    pub p: i64,
    pub k: i64,
    pub header_size: usize,
    pub pmax: i64,
    pub avlen: i64,
    pub avdim: i64,
    pub anvec: i64,
    pub Ap: *const i64,
    pub Ah: *const i64,
    pub Ab: *const i8,
    pub Ai: *const i64,
    pub Ax: *const ::std::os::raw::c_void,
    pub type_size: usize,
    pub A_sparsity: ::std::os::raw::c_int,
    pub iso: bool,
    pub by_col: bool,
}
#[test]
fn bindgen_test_layout_GB_Iterator_opaque() {
    const UNINIT: ::std::mem::MaybeUninit<GB_Iterator_opaque> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GB_Iterator_opaque>(),
        128usize,
        concat!("Size of: ", stringify!(GB_Iterator_opaque))
    );
    assert_eq!(
        ::std::mem::align_of::<GB_Iterator_opaque>(),
        8usize,
        concat!("Alignment of ", stringify!(GB_Iterator_opaque))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(pstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pend) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(pend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(header_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmax) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(pmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avlen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(avlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avdim) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(avdim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anvec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(anvec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ap) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(Ap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ah) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ab) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(Ab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ai) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(Ai)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ax) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(Ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_size) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(type_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).A_sparsity) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(A_sparsity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(iso)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).by_col) as usize - ptr as usize },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(GB_Iterator_opaque),
            "::",
            stringify!(by_col)
        )
    );
}
pub type GxB_Iterator = *mut GB_Iterator_opaque;
extern "C" {
    pub fn GxB_Iterator_new(iterator: *mut GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Iterator_free(iterator: *mut GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GB_Iterator_attach(
        iterator: GxB_Iterator,
        A: GrB_Matrix,
        format: GxB_Format_Value,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GB_Iterator_rc_seek(
        iterator: GxB_Iterator,
        j: GrB_Index,
        jth_vector: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GB_Iterator_rc_bitmap_next(iterator: GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_rowIterator_attach(
        iterator: GxB_Iterator,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_rowIterator_kount(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_rowIterator_seekRow(
        iterator: GxB_Iterator,
        row: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_rowIterator_kseek(
        iterator: GxB_Iterator,
        k: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_rowIterator_nextRow(iterator: GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_rowIterator_nextCol(iterator: GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_rowIterator_getRowIndex(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_rowIterator_getColIndex(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_colIterator_attach(
        iterator: GxB_Iterator,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_colIterator_kount(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_colIterator_seekCol(
        iterator: GxB_Iterator,
        col: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_colIterator_kseek(
        iterator: GxB_Iterator,
        k: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_colIterator_nextCol(iterator: GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_colIterator_nextRow(iterator: GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_colIterator_getColIndex(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_colIterator_getRowIndex(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_Matrix_Iterator_attach(
        iterator: GxB_Iterator,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Iterator_getpmax(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_Matrix_Iterator_seek(
        iterator: GxB_Iterator,
        p: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Iterator_next(iterator: GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Iterator_getp(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_Matrix_Iterator_getIndex(
        iterator: GxB_Iterator,
        row: *mut GrB_Index,
        col: *mut GrB_Index,
    );
}
extern "C" {
    pub fn GxB_Vector_Iterator_attach(
        iterator: GxB_Iterator,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Iterator_getpmax(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GB_Vector_Iterator_bitmap_seek(
        iterator: GxB_Iterator,
        unused: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Iterator_seek(
        iterator: GxB_Iterator,
        p: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Iterator_next(iterator: GxB_Iterator) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Iterator_getp(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_Vector_Iterator_getIndex(iterator: GxB_Iterator) -> GrB_Index;
}
extern "C" {
    pub fn GxB_Iterator_get_BOOL(iterator: GxB_Iterator) -> bool;
}
extern "C" {
    pub fn GxB_Iterator_get_INT8(iterator: GxB_Iterator) -> i8;
}
extern "C" {
    pub fn GxB_Iterator_get_INT16(iterator: GxB_Iterator) -> i16;
}
extern "C" {
    pub fn GxB_Iterator_get_INT32(iterator: GxB_Iterator) -> i32;
}
extern "C" {
    pub fn GxB_Iterator_get_INT64(iterator: GxB_Iterator) -> i64;
}
extern "C" {
    pub fn GxB_Iterator_get_UINT8(iterator: GxB_Iterator) -> u8;
}
extern "C" {
    pub fn GxB_Iterator_get_UINT16(iterator: GxB_Iterator) -> u16;
}
extern "C" {
    pub fn GxB_Iterator_get_UINT32(iterator: GxB_Iterator) -> u32;
}
extern "C" {
    pub fn GxB_Iterator_get_UINT64(iterator: GxB_Iterator) -> u64;
}
extern "C" {
    pub fn GxB_Iterator_get_FP32(iterator: GxB_Iterator) -> f32;
}
extern "C" {
    pub fn GxB_Iterator_get_FP64(iterator: GxB_Iterator) -> f64;
}
extern "C" {
    pub fn GxB_Iterator_get_FC32(iterator: GxB_Iterator) -> GxB_FC32_t;
}
extern "C" {
    pub fn GxB_Iterator_get_FC64(iterator: GxB_Iterator) -> GxB_FC64_t;
}
extern "C" {
    pub fn GxB_Iterator_get_UDT(
        iterator: GxB_Iterator,
        value: *mut ::std::os::raw::c_void,
    );
}
